pipeline:
  name: drone-testing
  identifier: drone_testing
  projectIdentifier: drone_testing
  orgIdentifier: terraform_demo
  properties:
    ci:
      codebase:
        build: <+input>
        connectorRef: account.Jim_Sheldon_GitHub
  stages:
  - stage:
      identifier: dronerunner
      name: drone-runner
      spec:
        cloneCodebase: true
        execution:
          steps:
          - step:
              identifier: secretscan
              name: secret-scan
              spec:
                connectorRef: account.harnessImage
                image: itc-docker-dev-local.artifactory.paloaltonetworks.com/plugins/secret-scan:release-5.2
                imagePullPolicy: Always
                settings:
                  repo_url: /harness/.
                  skip_scan: "false"
              timeout: ""
              type: Plugin
          - step:
              identifier: blackduck
              name: blackduck
              spec:
                command: |-
                  runbd \
                    --product-group=it \
                    --product-team=nova \
                    --pipeline-group-number=1 \
                    --pipeline-name=<+<+codebase.repoUrl>.substring(<+codebase.repoUrl>.lastIndexOf('/') + 1)> \
                    --version-name=latest \
                    --ci-owner=prodteam \
                    --ci-env=gcp \
                    --deploy-env=prod \
                    --token="$BD_TOKEN"
                connectorRef: account.harnessImage
                envVariables:
                  ARTIFACTORY_URL: https://artifactory.paloaltonetworks.com/artifactory/nova-mvn-prod-virtual
                  BD_GCP_KEY: <+secrets.getValue("bd_gcp_key")>
                  BD_TOKEN: <+secrets.getValue("bd_token")>
                  CX_PASSWORD: <+secrets.getValue("Cx_Password")>
                  DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_NAME_PATTERNS: node_modules,target
                  JFROG_PASSWORD: <+secrets.getValue("JFROG_PASSWORD")>
                  JFROG_USERNAME: <+secrets.getValue("JFROG_USERNAME")>
                  SONAR_TOKEN: <+secrets.getValue("SONAR_WRITER_API_TOKEN")>
                  SONAR_URL: <+secrets.getValue("SONAR_URL")>
                image: itc-docker-dev-local.artifactory.paloaltonetworks.com/plugins/maven-jdk17-panw
                imagePullPolicy: Always
              timeout: ""
              type: Run
          - step:
              identifier: checkmarx
              name: checkmarx
              spec:
                command: |-
                  runcx \
                    --cx-project="CxServer\\SP\\Company\\IT\\<+<+codebase.repoUrl>.substring(<+codebase.repoUrl>.lastIndexOf('/') + 1)>" \
                    --user="svc-it-csp" \
                    --password="$CX_PASSWORD" \
                    --path-exclude="Test,*test*,QA" \
                    --file-exclude="*.yml,*.yaml,*test*"
                connectorRef: account.harnessImage
                envVariables:
                  ARTIFACTORY_URL: https://artifactory.paloaltonetworks.com/artifactory/nova-mvn-prod-virtual
                  BD_GCP_KEY: <+secrets.getValue("bd_gcp_key")>
                  BD_TOKEN: <+secrets.getValue("bd_token")>
                  CX_PASSWORD: <+secrets.getValue("Cx_Password")>
                  DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_NAME_PATTERNS: node_modules,target
                  JFROG_PASSWORD: <+secrets.getValue("JFROG_PASSWORD")>
                  JFROG_USERNAME: <+secrets.getValue("JFROG_USERNAME")>
                  SONAR_TOKEN: <+secrets.getValue("SONAR_WRITER_API_TOKEN")>
                  SONAR_URL: <+secrets.getValue("SONAR_URL")>
                image: itc-docker-dev-local.artifactory.paloaltonetworks.com/plugins/maven-jdk17-panw
              timeout: ""
              type: Run
          - step:
              identifier: downloaddependencies
              name: download_dependencies
              spec:
                command: |-
                  mvn -B clean install \
                    dependency:resolve-plugins \
                    dependency:go-offline \
                    -DoverWriteIfNewer=true \
                    -Dmaven.test.skip=true \
                    -Dmaven.wagon.http.ssl.insecure=true \
                    -Dmaven.wagon.http.ssl.allowall=true \
                    -Dmaven.wagon.http.ssl.ignore.validity.dates=true
                  find /root/.m2/repository/ -name "0.0.1-SNAPSHOT" | xargs rm -rf
                connectorRef: account.harnessImage
                envVariables:
                  ARTIFACTORY_URL: https://artifactory.paloaltonetworks.com/artifactory/nova-mvn-prod-virtual
                  BD_GCP_KEY: <+secrets.getValue("bd_gcp_key")>
                  BD_TOKEN: <+secrets.getValue("bd_token")>
                  CX_PASSWORD: <+secrets.getValue("Cx_Password")>
                  DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_NAME_PATTERNS: node_modules,target
                  JFROG_PASSWORD: <+secrets.getValue("JFROG_PASSWORD")>
                  JFROG_USERNAME: <+secrets.getValue("JFROG_USERNAME")>
                  SONAR_TOKEN: <+secrets.getValue("SONAR_WRITER_API_TOKEN")>
                  SONAR_URL: <+secrets.getValue("SONAR_URL")>
                image: itc-docker-dev-local.artifactory.paloaltonetworks.com/plugins/maven-jdk17-panw
              timeout: ""
              type: Run
          - step:
              identifier: unittests
              name: unit_tests
              spec:
                command: |-
                  ls -al /root/.m2
                  mvn -B test -Dtest=*UnitTest -Djacoco.destFile=/usr/src/coverage/jacoco-unit.exec
                connectorRef: account.harnessImage
                envVariables:
                  ARTIFACTORY_URL: https://artifactory.paloaltonetworks.com/artifactory/nova-mvn-prod-virtual
                  BD_GCP_KEY: <+secrets.getValue("bd_gcp_key")>
                  BD_TOKEN: <+secrets.getValue("bd_token")>
                  CX_PASSWORD: <+secrets.getValue("Cx_Password")>
                  DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_NAME_PATTERNS: node_modules,target
                  JFROG_PASSWORD: <+secrets.getValue("JFROG_PASSWORD")>
                  JFROG_USERNAME: <+secrets.getValue("JFROG_USERNAME")>
                  SONAR_TOKEN: <+secrets.getValue("SONAR_WRITER_API_TOKEN")>
                  SONAR_URL: <+secrets.getValue("SONAR_URL")>
                image: itc-docker-dev-local.artifactory.paloaltonetworks.com/plugins/maven-jdk17-panw
              timeout: ""
              type: Run
          - step:
              identifier: integrationtests
              name: integration_tests
              spec:
                command: echo "Skipping IntegrationTest before resolving CSP db connectivty
                  issue"
                connectorRef: account.harnessImage
                envVariables:
                  ARTIFACTORY_URL: https://artifactory.paloaltonetworks.com/artifactory/nova-mvn-prod-virtual
                  BD_GCP_KEY: <+secrets.getValue("bd_gcp_key")>
                  BD_TOKEN: <+secrets.getValue("bd_token")>
                  CX_PASSWORD: <+secrets.getValue("Cx_Password")>
                  DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_NAME_PATTERNS: node_modules,target
                  INTEGRATION_TESTS_PROFILES: integration,ci
                  JFROG_PASSWORD: <+secrets.getValue("JFROG_PASSWORD")>
                  JFROG_USERNAME: <+secrets.getValue("JFROG_USERNAME")>
                  SONAR_TOKEN: <+secrets.getValue("SONAR_WRITER_API_TOKEN")>
                  SONAR_URL: <+secrets.getValue("SONAR_URL")>
                image: itc-docker-dev-local.artifactory.paloaltonetworks.com/plugins/maven-jdk17-panw
              timeout: ""
              type: Run
          - step:
              identifier: acceptancetests
              name: acceptance_tests
              spec:
                command: echo "Skipping AcceptanceTest before resolving CSP db connectivty
                  issue"
                connectorRef: account.harnessImage
                envVariables:
                  ARTIFACTORY_URL: https://artifactory.paloaltonetworks.com/artifactory/nova-mvn-prod-virtual
                  BD_GCP_KEY: <+secrets.getValue("bd_gcp_key")>
                  BD_TOKEN: <+secrets.getValue("bd_token")>
                  CX_PASSWORD: <+secrets.getValue("Cx_Password")>
                  DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_NAME_PATTERNS: node_modules,target
                  INTEGRATION_TESTS_PROFILES: integration,ci
                  JFROG_PASSWORD: <+secrets.getValue("JFROG_PASSWORD")>
                  JFROG_USERNAME: <+secrets.getValue("JFROG_USERNAME")>
                  SONAR_TOKEN: <+secrets.getValue("SONAR_WRITER_API_TOKEN")>
                  SONAR_URL: <+secrets.getValue("SONAR_URL")>
                image: itc-docker-dev-local.artifactory.paloaltonetworks.com/plugins/maven-jdk17-panw
              timeout: ""
              type: Run
          - step:
              identifier: apispectests
              name: api_spec_tests
              spec:
                command: echo "Skipping ApiSpecificationTest before resolving CSP
                  db connectivty issue"
                connectorRef: account.harnessImage
                envVariables:
                  ARTIFACTORY_URL: https://artifactory.paloaltonetworks.com/artifactory/nova-mvn-prod-virtual
                  BD_GCP_KEY: <+secrets.getValue("bd_gcp_key")>
                  BD_TOKEN: <+secrets.getValue("bd_token")>
                  CX_PASSWORD: <+secrets.getValue("Cx_Password")>
                  DETECT_BLACKDUCK_SIGNATURE_SCANNER_EXCLUSION_NAME_PATTERNS: node_modules,target
                  INTEGRATION_TESTS_PROFILES: integration,ci
                  JFROG_PASSWORD: <+secrets.getValue("JFROG_PASSWORD")>
                  JFROG_USERNAME: <+secrets.getValue("JFROG_USERNAME")>
                  SONAR_TOKEN: <+secrets.getValue("SONAR_WRITER_API_TOKEN")>
                  SONAR_URL: <+secrets.getValue("SONAR_URL")>
                image: itc-docker-dev-local.artifactory.paloaltonetworks.com/plugins/maven-jdk17-panw
              timeout: ""
              type: Run
          - step:
              identifier: sonarqubequalitygate
              name: sonarqube_quality_gate
              spec:
                command: |-
                  groupId=$(mvn -B -q -Dexec.executable="echo" -Dexec.args='${project.groupId}' --non-recursive exec:exec)
                  artifactId=$(mvn -B -q -Dexec.executable="echo" -Dexec.args='${project.artifactId}' --non-recursive exec:exec)
                  projectKey=$groupId:$artifactId
                  mvn -Djacoco.execs.dir=/usr/src/coverage -Djacoco.destFile=/usr/src/coverage/jacoco.exec -Dsonar.jacoco.reportPaths=/usr/src/coverage/jacoco.exec -e jacoco:merge compile sonar:sonar
                  sonar-gate-checker $projectKey
                connectorRef: account.harnessImage
                envVariables:
                  SONAR_PASSWORD: <+secrets.getValue("SONAR_PASSWORD")>
                  SONAR_URL: <+secrets.getValue("SONAR_URL")>
                  SONAR_USERNAME: <+secrets.getValue("SONAR_USERNAME")>
                image: itc-docker-dev-local.artifactory.paloaltonetworks.com/plugins/openjdk-11-maven-sonar-3.6.3:sonar-test
              timeout: ""
              type: Run
          - step:
              identifier: publishtoitd
              name: publish-to-itd
              spec:
                connectorRef: account.harnessImage
                envVariables:
                  COSIGN_PRIVATE_KEY: <+secrets.getValue("COSIGN_PRIVATE_KEY")>
                  SVC: <+secrets.getValue("SERVICE_NAME")>
                  TWISTCLI_CONSOLE_URL: <+secrets.getValue("TWISTCLI_CONSOLE_URL")>
                  TWISTCLI_PASSWORD: <+secrets.getValue("TWISTCLI_PASSWORD")>
                  TWISTCLI_USERNAME: <+secrets.getValue("TWISTCLI_USERNAME")>
                image: itc-docker-dev-local.artifactory.paloaltonetworks.com/plugins/docker-panw
                imagePullPolicy: Always
                settings:
                  config: <+secrets.getValue("JFROG_JSON")>
                  dockerfile: docker/Dockerfile
                  prtag: pr<+codebase.prNumber>-<+pipeline.sequenceId>
                  push_json_key: <+secrets.getValue("ITD_MS_SA")>
                  repo: gcr.io/itd-microsvcs/<+<+codebase.repoUrl>.substring(<+codebase.repoUrl>.lastIndexOf('/')
                    + 1)>
                  tag: 0.0.<+pipeline.sequenceId>
              timeout: ""
              type: Plugin
          - step:
              identifier: publishtoits
              name: publish-to-its
              spec:
                connectorRef: account.harnessImage
                envVariables:
                  COSIGN_PRIVATE_KEY: <+secrets.getValue("COSIGN_PRIVATE_KEY")>
                image: itc-docker-dev-local.artifactory.paloaltonetworks.com/plugins/docker-panw
                imagePullPolicy: Always
                settings:
                  json_key: <+secrets.getValue("ITD_MS_SA")>
                  push_json_key: <+secrets.getValue("ITS_MS_SA")>
                  repo: gcr.io/its-microsvcs/<+<+codebase.repoUrl>.substring(<+codebase.repoUrl>.lastIndexOf('/')
                    + 1)>
                  retag_from_repo: gcr.io/itd-microsvcs/<+<+codebase.repoUrl>.substring(<+codebase.repoUrl>.lastIndexOf('/')
                    + 1)>
                  retag_from_tag: 0.0.<+pipeline.sequenceId>
                  tag: 0.0.<+pipeline.sequenceId>
              timeout: ""
              type: Plugin
              when:
                condition: (<+trigger.event> != "PR")
                stageStatus: Success
          - step:
              identifier: publishtoitp
              name: publish-to-itp
              spec:
                connectorRef: account.harnessImage
                envVariables:
                  COSIGN_PRIVATE_KEY: <+secrets.getValue("COSIGN_PRIVATE_KEY")>
                image: itc-docker-dev-local.artifactory.paloaltonetworks.com/plugins/docker-panw
                imagePullPolicy: Always
                settings:
                  json_key: <+secrets.getValue("ITD_MS_SA")>
                  push_json_key: <+secrets.getValue("ITP_MS_SA")>
                  repo: gcr.io/itp-microsvcs/<+<+codebase.repoUrl>.substring(<+codebase.repoUrl>.lastIndexOf('/')
                    + 1)>
                  retag_from_repo: gcr.io/itd-microsvcs/<+<+codebase.repoUrl>.substring(<+codebase.repoUrl>.lastIndexOf('/')
                    + 1)>
                  retag_from_tag: 0.0.<+pipeline.sequenceId>
                  tag: 0.0.<+pipeline.sequenceId>
              timeout: ""
              type: Plugin
              when:
                condition: (<+trigger.event> != "PR")
                stageStatus: Success
          - step:
              identifier: publishtoitpfedil4
              name: publish-to-itp-fedil4
              spec:
                connectorRef: account.harnessImage
                envVariables:
                  COSIGN_PRIVATE_KEY: <+secrets.getValue("COSIGN_PRIVATE_KEY")>
                image: itc-docker-dev-local.artifactory.paloaltonetworks.com/plugins/docker-panw
                settings:
                  config: <+secrets.getValue("JFROG_JSON")>
                  json_key: <+secrets.getValue("ITD_MS_SA")>
                  repo: identity-fed-docker-local.artifactory.paloaltonetworks.com/<+<+codebase.repoUrl>.substring(<+codebase.repoUrl>.lastIndexOf('/')
                    + 1)>
                  retag_from_repo: gcr.io/itd-microsvcs/<+<+codebase.repoUrl>.substring(<+codebase.repoUrl>.lastIndexOf('/')
                    + 1)>
                  retag_from_tag: 0.0.<+pipeline.sequenceId>
                  tag: 0.0.<+pipeline.sequenceId>
              timeout: ""
              type: Plugin
              when:
                condition: (<+trigger.event> != "PR")
                stageStatus: Success
        infrastructure:
          spec:
            connectorRef: account.My_Cluster
            namespace: mynamespace
          type: KubernetesDirect
        platform:
          arch: Amd64
          os: Linux
      type: CI
      when:
        condition: <+trigger.branch> == "master" && <+trigger.payload.ref> != "refs/tags/**"
        pipelineStatus: Success
